# Useful variables:
# gitroot	Full path of the top folder in the git checkout
# repo		Last element of the git root folder path
# PROJECT_NAME	Defaults to `repo` but override to use a different name for pyenv, docker container etc.
# project	Relative path to the project folder within the git checkout.
# python_version	Base Python version for venv
# packages	Names of Python package folders (excluding migrations/ if it exists)

gitroot = ${shell git rev-parse --show-toplevel}
repo = ${notdir ${gitroot}}
PROJECT_NAME ?= ${repo}
project = ${dir ${shell git ls-files --full-name ${firstword ${MAKEFILE_LIST}}}}
python_version = 3.9.5
VIRTUAL_ENV=${shell pyenv root}/versions/${python_version}/envs/${PROJECT_NAME}
ignore_packages ?= migrations/
packages = ${filter-out ${ignore_packages},${dir ${wildcard */__init__.py}}}

SITE_PACKAGES := $(shell pip show pip | grep '^Location' | grep '${PROJECT_NAME}' | cut -f2 -d':')
ifeq (,${SITE_PACKAGES})
SITE_PACKAGES := site-packages-not-installed
endif

COMMON_MAKEFILE_DIR := $(dir $(lastword $(MAKEFILE_LIST)))

.DEFAULT_GOAL := help

# Some additional targets are available only when particular configuration files are present in the source tree.
# By conditionally including them from another file `make help` won't see them in projects where they don't apply
ifneq (,$(wildcard Dockerfile))
	MAKEFILE_INCLUDES += ${COMMON_MAKEFILE_DIR}Makefile.docker
endif
ifneq (,$(wildcard docker-compose.yml))
	MAKEFILE_INCLUDES += ${COMMON_MAKEFILE_DIR}Makefile.docker-compose
endif

-include ${MAKEFILE_INCLUDES}

.PHONY: help install init-pyenv rm-pyenv lint

help:    ## Show this help.
	+@printf "Usage:\n\tmake [options] target ...\n\nTargets:\n"
	+@echo "$$(grep -hE '^\S+:.*##' $(MAKEFILE_LIST) | sort | sed -e 's/:.*##\s*/:/' -e 's/\(.*\):\(.*\)/\\x1b[36m\1\\x1b[m:\2/' | column -c2 -t -s :)"


${SITE_PACKAGES}: $(wildcard *requirements.txt) setup.py
	pip3 install --quiet --upgrade pip tox black isort[requirements] coloredlogs
ifneq (,$(wildcard test-requirements.txt))
	pip3 install --quiet --upgrade -r test-requirements.txt
else
	pip3 install --editable .[dev]
	pip3 install --editable .[test]
endif
	touch $(shell pip3 show pip | grep '^Location' | cut -f2 -d':')

poetry.lock: pyproject.toml
	VIRTUAL_ENV=${VIRTUAL_ENV} poetry install -v && touch $@

.python-version:
	make rm-pyenv
	pyenv virtualenv $(python_version) $(PROJECT_NAME)
	pyenv local $(PROJECT_NAME)

init-pyenv: .python-version install

rm-pyenv:
	pyenv local --unset
	pyenv uninstall -f $(PROJECT_NAME)
	touch -t 1901010000.00 -c -m poetry.lock

install: ## pip install required packages.
install:  .python-version

# If the project is set up with poetry, then install using poetry. Otherwise, use pip directly.
ifneq (,$(wildcard pyproject.toml))
install: poetry.lock
else
install: ${SITE_PACKAGES}
endif

clean:   ## Remove tox and pyenv virtual environments.
clean: rm-pyenv
	rm -rf .tox *.egg-info

ISORT_OPTIONS ?= --multi-line=3 --trailing-comma --force-grid-wrap=0 --use-parentheses --line-width=88
lint::    ## Run black and isort to clean up source files
lint:: install
	black ${packages}
	isort ${ISORT_OPTIONS} ${packages}

# Pre-commit hooks. Targets only installed if there is a pre-commit configuration.
ifneq (,$(wildcard .pre-commit-config.yaml))

${gitroot}/.git/hooks/pre-commit: .pre-commit-config.yaml
	pre-commit install

install: ${gitroot}/.git/hooks/pre-commit
endif
